{"version":2,"defects":[],"times":{"App\\Tests\\Context\\Account\\Application\\UseCase\\FindAllAccounts\\FindAllAccountsQueryHandlerTest::testFindAllAccounts":0.008,"App\\Tests\\Context\\Account\\Application\\UseCase\\FindAllAccounts\\FindAllAccountsQueryHandlerTest::testFindAllAccountsEmptyResult":0,"App\\Tests\\Context\\Account\\Application\\UseCase\\CreateAccount\\AccountCreatorTest::test_it_should_create_an_account":0.009,"App\\Tests\\Context\\Account\\Application\\UseCase\\CreateAccount\\CreateAccountCommandHandlerTest::test_it_should_create_an_account":0.001,"App\\Tests\\Context\\Account\\Application\\UseCase\\EnableDisableAccount\\DisablerAccountCommandHandlerTest::testDisableAccount":0.001,"App\\Tests\\Context\\Account\\Application\\UseCase\\EnableDisableAccount\\EnablerAccountCommandHandlerTest::testDisableAccount":0,"App\\Tests\\Context\\Account\\Application\\UseCase\\FindAccount\\FindAccountQueryHandlerTest::testFindAccount":0.001,"App\\Tests\\Context\\Account\\Application\\UseCase\\FindAccount\\FindAccountQueryHandlerTest::testFindAccountNotFound":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_create_and_save_recurring_expense":0.002,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_throw_exception_when_expense_type_not_found":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_throw_exception_when_account_not_found":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_single_month_recurring_expense":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_all_months_recurring_expense":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_empty_months_array":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_invalid_date_format":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_edge_case_due_days":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_minimum_due_day":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_zero_amount":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_null_description_and_notes":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_leap_year_february":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_repository_save_failure":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\CreateRecurringExpense\\CreateRecurringExpenseCommandHandlerTest::test_it_should_handle_flush_failure":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\EnterExpense\\EnterExpenseCommandHandlerTest::test_it_should_enter_an_expense":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindActiveExpensesByDateRangeQueryHandlerTest::testFindActiveExpensesByDateRange":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindActiveExpensesByDateRangeQueryHandlerTest::testFindActiveExpensesByDateRangeEmptyResult":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindActiveExpensesByDateRangeQueryHandlerTest::testFindActiveExpensesByDateRangeWithSpecificMonth":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindActiveExpensesByDateRangeQueryHandlerTest::testFindActiveExpensesByDateRangeCallsRepositoryOnce":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindInactiveExpensesByDateRangeQueryHandlerTest::testFindInactiveExpensesByDateRange":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindInactiveExpensesByDateRangeQueryHandlerTest::testFindInactiveExpensesByDateRangeEmptyResult":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindInactiveExpensesByDateRangeQueryHandlerTest::testFindInactiveExpensesByDateRangeWithSpecificMonth":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\FindExpenseByRange\\FindInactiveExpensesByDateRangeQueryHandlerTest::testFindInactiveExpensesByDateRangeCallsRepositoryOnce":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\RemoveRecurringExpense\\RemoveRecurringExpenseCommandHandlerTest::test_it_removes_existing_recurring_expense":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\RemoveRecurringExpense\\RemoveRecurringExpenseCommandHandlerTest::test_it_propagates_exception_when_not_found":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\UpdateExpense\\UpdateExpenseCommandHandlerTest::test_it_should_update_expense_with_all_fields":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\UpdateExpense\\UpdateExpenseCommandHandlerTest::test_it_should_update_only_provided_fields":0.001,"App\\Tests\\Context\\Expense\\Application\\UseCase\\UpdateRecurringExpense\\UpdateRecurringExpenseCommandHandlerTest::test_it_updates_all_fields":0.002,"App\\Tests\\Context\\Expense\\Application\\UseCase\\UpdateRecurringExpense\\UpdateRecurringExpenseCommandHandlerTest::test_it_updates_only_non_null_fields":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\UpdateRecurringExpense\\UpdateRecurringExpenseCommandHandlerTest::test_it_propagates_exception_when_recurring_not_found":0,"App\\Tests\\Context\\Expense\\Application\\UseCase\\UpdateRecurringExpense\\UpdateRecurringExpenseCommandHandlerTest::test_it_propagates_exception_when_type_not_found":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_enters_income_with_all_fields":0.002,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_enters_income_without_description":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_propagates_exception_when_resident_unit_not_found":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_propagates_exception_when_income_type_not_found":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_propagates_date_malformed_exception":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_propagates_due_date_must_be_in_future_exception":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_handles_repository_save_failure":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\EnterIncome\\EnterIncomeCommandHandlerTest::test_it_handles_event_bus_publish_failure":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_updates_income_with_all_fields":0.001,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_updates_only_due_date_when_description_is_null":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_updates_only_description_when_due_date_is_null":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_updates_nothing_when_all_fields_are_null":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_propagates_exception_when_income_not_found":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_propagates_date_malformed_exception":0,"App\\Tests\\Context\\Income\\Application\\UseCase\\UpdateIncome\\UpdateIncomeCommandHandlerTest::test_it_propagates_due_date_must_be_in_future_exception":0,"App\\Tests\\Context\\ResidentUnit\\Application\\UseCase\\AppendRecipients\\AppendRecipientsCommandHandlerTest::test_it_should_append_a_recipient_to_a_resident_unit":0.001,"App\\Tests\\Context\\ResidentUnit\\Application\\UseCase\\AppendRecipients\\AppendRecipientsCommandHandlerTest::test_it_should_throw_an_exception_when_resident_unit_does_not_exist":0,"App\\Tests\\Context\\ResidentUnit\\Application\\UseCase\\AppendRecipients\\AppendRecipientsCommandHandlerTest::test_it_should_add_a_recipient_when_others_already_exist":0,"App\\Tests\\Context\\ResidentUnit\\Application\\UseCase\\AppendRecipients\\AppendRecipientsCommandHandlerTest::test_it_should_propagate_exception_if_save_fails":0,"App\\Tests\\Context\\ResidentUnit\\Application\\UseCase\\CreateUnit\\CreateResidentUnitCommandHandlerTest::test_it_throws_exception_when_ideal_fraction_exceeds_one":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\PaySlip\\PaySlipCommandHandlerTest::test_it_should_apply_pay_transition_to_slip":0.001,"App\\Tests\\Context\\Slip\\Application\\UseCase\\PaySlip\\PaySlipCommandHandlerTest::test_it_should_throw_an_exception_when_slip_not_found":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\PaySlip\\PaySlipCommandHandlerTest::test_it_should_throw_an_exception_when_transition_is_not_valid":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\SendBulkSlips\\SendBulkSlipsCommandHandlerTest::test_it_should_apply_send_transition_to_multiple_slips":0.001,"App\\Tests\\Context\\Slip\\Application\\UseCase\\SendBulkSlips\\SendBulkSlipsCommandHandlerTest::test_it_should_only_apply_transition_when_possible":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\SendSlip\\SlipSendCommandHandlerTest::test_it_should_apply_send_transition_to_slip":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\SendSlip\\SlipSendCommandHandlerTest::test_it_should_throw_an_exception_when_slip_not_found":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\SendSlip\\SlipSendCommandHandlerTest::test_it_should_throw_an_exception_when_transition_is_not_valid":0,"App\\Tests\\Context\\Slip\\Application\\UseCase\\SlipGenerationCommandHandlerTest::it_generates_and_persists_slips_correctly":0.003,"App\\Tests\\Context\\Account\\Domain\\CreateAccountTest::test_it_should_create_an_account_with_valid_data":0,"App\\Tests\\Context\\Account\\Domain\\DisableAccountTest::testDisableAccount":0,"App\\Tests\\Context\\Account\\Domain\\EnableAccountTest::testEnableAccount":0,"App\\Tests\\Context\\Expense\\Domain\\EnterExpenseTest::test_it_creates_a_valid_expense":0.001,"App\\Tests\\Context\\Expense\\Domain\\EnterExpenseTest::test_it_throws_when_negative_amount":0,"App\\Tests\\Context\\Expense\\Domain\\ExpenseUpdateTest::test_it_should_update_amount_when_not_paid":0,"App\\Tests\\Context\\Expense\\Domain\\ExpenseUpdateTest::test_it_should_update_due_date_when_not_paid":0,"App\\Tests\\Context\\Expense\\Domain\\ExpenseUpdateTest::test_it_should_update_description_when_not_paid":0,"App\\Tests\\Context\\Expense\\Domain\\ExpenseUpdateTest::test_it_should_not_update_when_expense_is_paid":0,"App\\Tests\\Context\\Expense\\Domain\\RecurringExpenseRepositoryTest::test_it_filters_active_for_date_range_correctly":0.004,"App\\Tests\\Context\\Expense\\Domain\\RecurringExpenseTest::test_it_creates_recurring_expense_with_correct_properties":0,"App\\Tests\\Context\\Expense\\Domain\\RecurringExpenseTest::test_it_adds_and_removes_child_expenses":0.001,"App\\Tests\\Context\\ResidentUnit\\Domain\\ResidentUnitTest::test_it_should_update_the_updated_at_timestamp_when_appending_a_recipient":1.001,"App\\Tests\\Context\\ResidentUnit\\Domain\\ResidentUnitTest::test_it_should_replace_all_recipients_and_update_timestamp":1.001,"App\\Tests\\Context\\ResidentUnit\\Domain\\ResidentUnitTest::test_it_should_add_multiple_recipients_sequentially":0,"App\\Tests\\Context\\ResidentUnit\\Domain\\ResidentUnitTest::test_it_should_allow_adding_recipients_with_duplicate_emails":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_allow_generation_on_valid_scenarios with data set \"Forced generation should always be allowed\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_allow_generation_on_valid_scenarios with data set \"First time generation, on the 25th\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_allow_generation_on_valid_scenarios with data set \"First time generation, after the 25th\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_allow_generation_on_valid_scenarios with data set \"First time generation, on the 5th of due month\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_allow_generation_on_valid_scenarios with data set \"Recreation, within window\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_throw_exception_on_invalid_scenarios with data set \"Generation too early\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_throw_exception_on_invalid_scenarios with data set \"First time generation expired (requires confirmation)\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_throw_exception_on_invalid_scenarios with data set \"Recreation expired\"":0,"App\\Tests\\Context\\Slip\\Domain\\Service\\SlipGenerationPolicyTest::it_should_throw_exception_on_invalid_scenarios with data set \"Past month generation requires confirmation\"":0}}