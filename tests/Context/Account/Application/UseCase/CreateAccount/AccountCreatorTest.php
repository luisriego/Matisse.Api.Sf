<?phpdeclare(strict_types=1);namespace App\Tests\Context\Account\Application\UseCase\CreateAccount;use App\Context\Account\Application\UseCase\CreateAccount\AccountCreator;use App\Tests\Context\Account\AccountModuleUnitTestCase;use App\Tests\Context\Account\Domain\AccountCodeMother;use App\Tests\Context\Account\Domain\AccountDescriptionMother;use App\Tests\Context\Account\Domain\AccountIdMother;use App\Tests\Context\Account\Domain\AccountMother;use App\Tests\Context\Account\Domain\AccountNameMother;final class AccountCreatorTest extends AccountModuleUnitTestCase{    private AccountCreator $creator;    protected function setUp(): void    {        parent::setUp();        $this->creator = new AccountCreator($this->repository());    }    /** @test  */    public function test_it_should_create_an_account_with_a_description(): void    {        $id = AccountIdMother::create();        $code = AccountCodeMother::create();        $name = AccountNameMother::create();        $description = AccountDescriptionMother::create();        $account = AccountMother::create($id, $code, $name, $description);        $this->shouldSave($account);        $this->shouldPublishDomainEvents($account->pullDomainEvents());        $this->creator->__invoke($id, $code, $name, $description);    }    /** @test  */    public function test_it_should_create_an_account_without_a_description(): void    {        $id = AccountIdMother::create();        $code = AccountCodeMother::create();        $name = AccountNameMother::create();        $account = AccountMother::create($id, $code, $name, null);        $this->shouldSave($account);        $this->shouldPublishDomainEvents($account->pullDomainEvents());        $this->creator->__invoke($id, $code, $name, null);    }}